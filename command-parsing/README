/*---------------------------------------------------------------------------
*
* README
*
*     08/26/2016 - 
*
*     <pankajbharti.lfc@gmail.com>
*
*     Copyright (c) 2016 Pankaj Bharti
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*     All rights reserved.
*
*---------------------------------------------------------------------------
*/

The getopt() function, which lives in the unistd.h system header file, is shown
below:

    "int getopt( int argc, char *const argv[], const char *optstring  );"
Given a number of command-line arguments (argc), an array of pointers to those
arguments (argv), and an option string (optstring), getopt() returns the first
option, and sets some global variables. When you call it again with the same
arguments, it returns the next option, and sets the global variables. If no more
recognized options are found, it returns -1 and you're done.

The global variables set by getopt() include:

    optarg -- A pointer to the current option argument, if there is one.
    optind -- An index of the next argv pointer to process when getopt() is
              called again.
    optopt -- This is the last known option.
    optstring -- The option string, optString, tells getopt() which options you
                 can process, and which options require an argument. If other options are
                 encountered during processing, getopt() displays an error message, and the
                 program exits after displaying a usage message.
                 It is just a string, and each character of this string
                 represents an option. If this option requires an argument, you have to
                 follow the option character by :.
                 For example, "cdf:g" accepts the options c; d; f; g, and f requires an
                 additional argument. An option in command line looks like -option, so you
                 can use the options -c, -d, -f argument and -g.

The option string (optstring) is one character per option. Options that have
arguments, such as the -l and -o options in the example, are followed by a :
character. The optstring used by the example is Il:o:vh? (remember, you also
want to support the last two options for printing the program's usage message).

You call getopt() repeatedly until it returns -1; any remaining command-line
arguments are usually considered file names or something else appropriate for
the program.


